version: '3.8'

services:
  postgresql-main:
    image: postgres:15
    container_name: db_main
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: main_db
    volumes:
      - ./init-primary.sh:/docker-entrypoint-initdb.d/init-primary.sh
      - postgres_main_data:/var/lib/postgresql/data
    command: postgres -c listen_addresses='*' -c wal_level=replica -c max_wal_senders=10 -c max_replication_slots=10 -c wal_keep_size=1GB -c hot_standby=on
    networks:
      - postgres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgresql-replica:
    image: postgres:15
    container_name: db_replica
    ports:
      - '5433:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: replica_db
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    depends_on:
      postgresql-main:
        condition: service_healthy
    entrypoint: |
      bash -c "
      echo 'Waiting for primary...' &&
      until PGPASSWORD=postgres psql -h postgresql-main -p 5432 -U postgres -c 'SELECT 1'; do
        echo 'Waiting for primary to be ready...'
        sleep 2
      done &&
      echo 'Primary is ready, starting replication setup' &&
      rm -rf /tmp/pgdata &&
      mkdir -p /tmp/pgdata &&
      PGPASSWORD=postgres pg_basebackup -h postgresql-main -p 5432 -U postgres -D /tmp/pgdata -Fp -Xs -P -R &&
      rm -rf /var/lib/postgresql/data/* &&
      cp -R /tmp/pgdata/* /var/lib/postgresql/data/ &&
      touch /var/lib/postgresql/data/standby.signal &&
      echo \"primary_conninfo = 'host=postgresql-main port=5432 user=postgres password=postgres application_name=db_replica'\" >> /var/lib/postgresql/data/postgresql.auto.conf &&
      chown -R postgres:postgres /var/lib/postgresql/data &&
      chmod 700 /var/lib/postgresql/data &&
      echo 'Starting replica server' &&
      su postgres -c 'postgres'
      "
    networks:
      - postgres_network

  backend-topupgame:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: backend-topupgame
    ports:
      - '8080:8080'
    networks:
      - postgres_network
    volumes:
      - ./deployment/.env.local:/app/.env.local
    environment:
      - TZ=Asia/Jakarta
      - ENV_FILE=/app/.env.local
    restart: on-failure
    depends_on:
      postgresql-main:
        condition: service_healthy
    command: >
      sh -c "
      echo 'Waiting for replica database...' &&
      sleep 30 &&
      ./main
      "

volumes:
  postgres_main_data:
  postgres_replica_data:

networks:
  postgres_network:
    driver: bridge